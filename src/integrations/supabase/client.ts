
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://jvmmgamfdbgdjjptfkgy.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imp2bW1nYW1mZGJnZGpqcHRma2d5Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3MzgwMzk5NjAsImV4cCI6MjA1MzYxNTk2MH0._51Uk0LRRB-r2UI7bJZp0rpotbxage6hULlPrWZhskk";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    persistSession: true,
    autoRefreshToken: true,
    storageKey: 'fring-auth-storage',
    detectSessionInUrl: true
  }
});

// Détecter les changements d'état d'authentification et les logger
supabase.auth.onAuthStateChange((event, session) => {
  console.log('Supabase Auth Event:', event, session ? 'Session active' : 'Pas de session');
  
  if (event === 'SIGNED_IN' && session) {
    console.log('Utilisateur connecté:', session.user.id);
    // Stocker les données utilisateur dans localStorage pour une meilleure persistance
    localStorage.setItem('supabase.auth.session', JSON.stringify(session));
  } else if (event === 'SIGNED_OUT') {
    console.log('Utilisateur déconnecté');
    // Nettoyer localStorage
    localStorage.removeItem('supabase.auth.session');
  } else if (event === 'TOKEN_REFRESHED' && session) {
    console.log('Token rafraîchi pour:', session.user.id);
    localStorage.setItem('supabase.auth.session', JSON.stringify(session));
  }
});

// Fonction utilitaire pour vérifier si une session est active
export const isSessionActive = async (): Promise<boolean> => {
  try {
    const { data: { session }, error } = await supabase.auth.getSession();
    
    if (error) {
      console.error("Erreur lors de la vérification de session:", error);
      return false;
    }
    
    return !!session;
  } catch (error) {
    console.error("Exception lors de la vérification de session:", error);
    return false;
  }
};

// Fonction utilitaire pour récupérer l'utilisateur courant
export const getCurrentUser = async () => {
  try {
    const { data: { user }, error } = await supabase.auth.getUser();
    
    if (error) {
      console.error("Erreur lors de la récupération de l'utilisateur:", error);
      return null;
    }
    
    return user;
  } catch (error) {
    console.error("Exception lors de la récupération de l'utilisateur:", error);
    return null;
  }
};
